\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{python_style}[2023/04/28 Python code highlighting provided by Marco Bertenghi]

% Dependencies: This package is based on the listings and xcolor packages
\RequirePackage{listings}
\RequirePackage{xcolor}

% Define colors for syntax highlighting
\definecolor{commentColour}{rgb}{0,0.6,0}
\definecolor{tripleQuoteColour}{rgb}{0,0.51,0}
\definecolor{lineNumberColour}{rgb}{.51,0,0}
\definecolor{stringColour}{rgb}{0.51,0,0.51}
\definecolor{keywordColour}{rgb}{0.64,0.08,0.08}
\definecolor{backgroundColor}{rgb}{1,1,1}
\definecolor{blueKeyword}{rgb}{0,0,0.51}
\definecolor{functionOrange}{rgb}{0.9, 0.45, 0.13}
\definecolor{exceptionColour}{rgb}{1,0,0}
\definecolor{lineColour}{rgb}{0.5,0.5,0.5}
\definecolor{typeColour}{rgb}{0.85, 0.2, 0.53}
\definecolor{boolColour}{rgb}{0.0, 0.54, 0.54}

% Python code style using listings package
\lstdefinestyle{python_style}{
backgroundcolor=\color{backgroundColor},
commentstyle=\color{lineNumberColour}\itshape,
keywordstyle=\color{keywordColour}\bfseries,
numberstyle=\footnotesize\color{lineColour},
stringstyle=\color{stringColour},
basicstyle=\ttfamily\footnotesize\color{black}, 
breakatwhitespace=false,
breaklines=true,
captionpos=b,
keepspaces=true,
numbers=left,
numbersep=5pt,
xleftmargin=15pt,
showspaces=false,
showstringspaces=false,
showtabs=false,
tabsize=4,
language=Python,
% Emphasize keywords
emph={[1]def, if, elif, else, break, continue, class, return, for, try, except, assert, is, not, in, yield, while},
emphstyle={[1]\color{blueKeyword}\bf},
% Emphasize types
emph={[2] int, float, str, bool, list, tuple, dict, set, frozenset},
emphstyle={[2]\color{typeColour}},
% Emphasize boolean literals
emph={[3]True, False, None},
emphstyle=[3]\color{boolColour},
% Emphasize 'self' keyword
emph={[4]self},
emphstyle=[4]\color{commentColour},
% Emphasize exception names
emph={[5]Exception,NameError,IndexError,SyntaxError,TypeError,ValueError,OverflowError,ZeroDivisionError},
emphstyle=[5]\color{exceptionColour}\bf,
moredelim=[s][\color{tripleQuoteColour}\bf]{'''}{'''},
morecomment=[s][\color{tripleQuoteColour}]{"""}{"""},
morekeywords = {print, append, pop, insert, remove, index, count, sort, reverse, extend, clear, copy, update, items, keys, values, get, startswith, endswith, find, rfind, split, join, strip, lstrip, rstrip, format, replace, lower, upper, capitalize, islower, isupper, isspace, isdigit, isalpha, isalnum, istitle, partition, rpartition, center, ljust, rjust, zfill, format_map, isdecimal, isnumeric, casefold, swapcase, encode, expandtabs, translate, isidentifier, isprintable, isascii, range, input, open, len, sorted, sum, zip, enumerate, all, any, map, filter, max, min, abs, type, import, from, as},
keywordstyle=\color{functionOrange},
lineskip=1pt,
frame=trbl,
frameround=tttt,
framesep=.3ex,
rulecolor=\color{black},
}

% Environment for Python code
\lstnewenvironment{python}
{\lstset{style=python_style}}
{}

% Style for inline Python code
\lstdefinestyle{pythoninline}{
style=python_style,
basicstyle=\ttfamily,
}

% Inline Python code command
\newcommand*{\pyth}{\lstinline[style=pythoninline]}

\endinput